angular.module('starter.controllers', [])// intro.controller('IntroCtrl', function($scope, $state) {   // Called to navigate to the main app  var startApp = function() {    $state.go('home');    // Set a flag that we finished the tutorial    window.localStorage['didTutorial'] = true;  };  //No this is silly  // Check if the user already did the tutorial and skip it if soif(window.localStorage['didTutorial'] === "true") {    console.log('Skip intro');    startApp();  }  else{  setTimeout(function () {		navigator.splashscreen.hide();	}, 750);  }    $scope.start = function(){  	startApp();  }  // Move to the next slide  $scope.next = function() {    $scope.$broadcast('slideBox.nextSlide');  };  // Our initial right buttons  var rightButtons = [    {      content: 'Next',      type: 'button-positive button-clear',      tap: function(e) {        // Go to the next slide on tap        $scope.next();      }    }  ];    // Our initial left buttons  var leftButtons = [    {      content: 'Skip',      type: 'button-positive button-clear',      tap: function(e) {        // Start the app on tap        startApp();      }    }  ];  // Bind the left and right buttons to the scope  $scope.leftButtons = leftButtons;  $scope.rightButtons = rightButtons;  // Called each time the slide changes  $scope.slideChanged = function(index) {    // Check if we should update the left buttons    if(index > 0) {      // If this is not the first slide, give it a back button      $scope.leftButtons = [        {          content: 'Back',          type: 'button-positive button-clear',          tap: function(e) {            // Move to the previous slide            $scope.$broadcast('slideBox.prevSlide');          }        }      ];    } else {      // This is the first slide, use the default left buttons      $scope.leftButtons = leftButtons;    }        // If this is the last slide, set the right button to    // move to the app    if(index == 2) {      $scope.rightButtons = [        {          content: 'Start using MyApp',          type: 'button-positive button-clear',          tap: function(e) {            startApp();          }        }      ];    } else {      // Otherwise, use the default buttons      $scope.rightButtons = rightButtons;    }  };}).controller('MainCtrl', function($scope, $state) {  console.log('MainCtrl');    setTimeout(function () {		navigator.splashscreen.hide();	}, 750);      $scope.toIntro = function(){    window.localStorage['didTutorial'] = "false";    $state.go('intro');  }})//Home Controller.controller('HomeCtrl', function($scope, $state) {  $scope.cari = function() {    $state.go('map');  }  $scope.toIntro = function(){    window.localStorage['didTutorial'] = "false";    $state.go('intro');  }}) //controller position.controller('MapCtrl', function($scope, $state, $cordovaGeolocation, $ionicLoading) {  var options = {timeout: 10000, enableHighAccuracy: true};    	// Setup the loader    $ionicLoading.show({      content: 'Loading',      animation: 'fade-in',      showBackdrop: true,      maxWidth: 200,      showDelay: 0    });  $cordovaGeolocation.getCurrentPosition(options).then(function(position){    console.log($cordovaGeolocation.getCurrentPosition(options));    var latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);     var mapOptions = {      center: latLng,      zoom: 15,      mapTypeId: google.maps.MapTypeId.ROADMAP    };        $scope.map = new google.maps.Map(document.getElementById("map"), mapOptions);    $ionicLoading.hide();    //Wait until the map is loaded    google.maps.event.addListenerOnce($scope.map, 'idle', function(){           var marker = new google.maps.Marker({          map: $scope.map,          animation: google.maps.Animation.DROP,          position: latLng      });      var infoWindow = new google.maps.InfoWindow({          content: "Here I am!"      });           google.maps.event.addListener(marker, 'click', function () {          infoWindow.open($scope.map, marker);      });               });      }, function(error){    console.log("Could not get location");  });})//controller Nearby Search.controller('NearbyCtrl', function($scope, $state, $cordovaGeolocation, $ionicLoading) {  var options = {timeout: 10000, enableHighAccuracy: true};    // Setup the loader	$ionicLoading.show({	  content: 'Loading',	  animation: 'fade-in',	  showBackdrop: true,	  maxWidth: 200,	  showDelay: 0	});	  $cordovaGeolocation.getCurrentPosition(options).then(function(position){	    console.log($cordovaGeolocation.getCurrentPosition(options));	    var latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);	 	    var mapOptions = {	      center: latLng,	      zoom: 15	    };	    $scope.map = new google.maps.Map(document.getElementById("map"), mapOptions);	    var infowindow = new google.maps.InfoWindow();	    var service = new google.maps.places.PlacesService($scope.map);	    service.nearbySearch({	      location: latLng,	      radius: 500,	      types: ['mosque']	    }, callback);	    $ionicLoading.hide();	    function callback(results, status) {	      if (status === google.maps.places.PlacesServiceStatus.OK) {	        for (var i = 0; i < results.length; i++) {	          createMarker(results[i]);	        }	      }	    }	    function createMarker(place) {	      var placeLoc = place.geometry.location;	      var marker = new google.maps.Marker({	        map: $scope.map,	        	        animation: google.maps.Animation.DROP,	        position: place.geometry.location	      });	      google.maps.event.addListener(marker, 'click', function() {	        infowindow.setContent(place.name);	        infowindow.open($scope.map, this);	      });	    }	    	  }, function(error){	    console.log("Could not get location");	  });});